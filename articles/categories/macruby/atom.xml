<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: macruby | Matt Aimonetti]]></title>
  <link href="http://mattetti.github.com/Matt-Aimonetti/articles/categories/macruby/atom.xml" rel="self"/>
  <link href="http://mattetti.github.com/Matt-Aimonetti/"/>
  <updated>2012-04-17T03:10:20+02:00</updated>
  <id>http://mattetti.github.com/Matt-Aimonetti/</id>
  <author>
    <name><![CDATA[Matt Aimonetti]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hey Apple, please be nice and share]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2011/03/07/hey-apple-please-be-nice-and-share/"/>
    <updated>2011-03-07T09:00:56+01:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2011/03/07/hey-apple-please-be-nice-and-share</id>
    <content type="html"><![CDATA[<p>My name is Matt Aimonetti, and in my free time I work on Apple's open source <a href="http://www.ruby-lang.org">Ruby</a> implementation named <a href="http://macruby.org">MacRuby</a>. I'm also the author of <a href="http://oreilly.com/catalog/0636920000723">O'Reilly's MacRuby book</a>. As you can imagine, I'm very thankful that Apple initiated the MacRuby project a few years ago and have been an avid supporter. MacRuby is awesome to develop OS X native applications using the Ruby language and even allows you to compile down your apps to machine code. It's a great alternative to Objective-C.</p>

<p><a href="http://www.apple.com/macosx/lion/"><img src="https://img.skitch.com/20111012-kyiy9nhx5n9h9wafucyh8p3knx.jpg" alt="" /></a></p>

<p>MacRuby is so awesome that Apple is even <a href="http://twitter.com/GeorgeBellos/status/41595085179203584">using it in its upcoming OS</a>. The only problem is that Apple apparently decided to not share MacRuby with other OS X developers and put <a href="http://yfrog.com/h8hhlydj">MacRuby in the OS private frameworks</a>. While this doesn't affect the project itself, it does affect OS X developers like myself who can't link to <a href="http://www.apple.com/macosx/lion/">Lion</a>'s private MacRuby framework and are forced to embed MacRuby with their applications.</p>

<p>That's why I have opened a <a href="http://bugreporter.apple.com/">ticket on Apple radar system</a> to ask that MacRuby be made a public framework.</p>

<p>If you also want Apple to make this change, <a href="http://bugreporter.apple.com/">please take a minute and let them know</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatically generating BridgeSupport files]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2011/02/19/bridgesupport-build/"/>
    <updated>2011-02-19T16:29:07+01:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2011/02/19/bridgesupport-build</id>
    <content type="html"><![CDATA[<p>Today I was helping someone write an Objective-C framework around <a href="http://cocos2d.org/">cocos2d</a>.</p>

<p>C/Objective-C code can be called directly from MacRuby. However the Obj-C code you would like to use might be using some ANSI C symbols that are non-object-oriented items such as constants, enumerations, structures, and functions. To make these items available to our MacRuby code, you need to generate a <a href="http://ofps.oreilly.com/titles/9781449380373/ch03.html#_using_objective_c_or_c_code">BridgeSupport file as explained in this section of my book</a>.</p>

<p>In our case, we were working on the framework and I didn't feel like manually having to regenerate the BridgeSupport file every single time I would compile our code. So instead I added a new build phase in our target.</p>

<p>[caption id="" align="aligncenter" width="741" caption="Adding a new step to our build"]<a href="https://img.skitch.com/20110220-b685ag2cef8qm69uwn73e3equ4.png"><img src="https://img.skitch.com/20110220-b685ag2cef8qm69uwn73e3equ4.png" alt="" /></a>[/caption]</p>

<p>And I added the following script to run at the end of the build:</p>

<p>`</p>

<h1>This step generated the bridgesupport file for the framework</h1>

<p>PATH="$PATH:/usr/local/bin"
mkdir -p $TARGET_BUILD_DIR/$PROJECT_NAME.framework/Resources/BridgeSupport/
gen_bridge_metadata --64-bit -f $TARGET_BUILD_DIR/$PROJECT_NAME.framework/ -o $TARGET_BUILD_DIR/$PROJECT_NAME.framework/Resources/BridgeSupport/$PROJECT_NAME.bridgesupport
`</p>

<p>Th<code>e script just executes the steps required to add the BridgeSupport file to your framework. I can now rebuild my framework without having to worry about BridgeSupport.
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacRuby book update]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2011/01/15/macruby-book-update/"/>
    <updated>2011-01-15T11:48:05+01:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2011/01/15/macruby-book-update</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacRuby, WebKit and JS]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2010/10/19/macruby-webkit-and-js/"/>
    <updated>2010-10-19T00:05:37+02:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2010/10/19/macruby-webkit-and-js</id>
    <content type="html"><![CDATA[<p>I was working on a piece of code using MacRuby, Webkit and JavaScript. Calling JS from MacRuby is really straight forward but calling Ruby from JS is a but tricky. There is actually a known bug in MacRuby which was giving me a hard time. The bug should be fixed in 0.8 if everything goes according to plan. In the mean time here is a quick run down:</p>

<p>The JS bridge only works when using WebKit so we need to create a tiny browser to test our code. What we are going to do is to make an object available via JS and also trigger some JS to test the bridge both ways. Here is the full code:</p>

<p>On the object we want to make available via JS (instance of Cat), we have to make the methods available by defining def self.isSelectorExcludedFromWebScript(sel); false end</p>

<p>To trigger JS from Ruby, we use #evaluateWebScript on windowScriptObject. In our example we are using JQuery since it's already loaded in the DOM. We also go full loop by printing out the result of JS calling a method on our Ruby object.</p>

<p>Here is the thing, MacRuby doesn't have the age method compiled/registered yet so JS can't call it. To fix this problem we force the registration of the method by doing: @kitty.respondsToSelector("age").  Note that if #age was taking arguments, we would have to use @kitty.respondsToSelector("age:") and then evaluate the JS like that: @js_engine.evaluateWebScript('animal.age_(12)')</p>

<p>Hopefully by the time you need to do something like that, MacRuby 0.8 will be released and you won't have to worry about that :)</p>

<p>For more information about calling Obj-C/Ruby from JavaScript, <a href="http://developer.apple.com/library/mac/#documentation/AppleApplications/Conceptual/SafariJSProgTopics/Tasks/ObjCFromJavaScript.html#//apple_ref/doc/uid/30001215-BBCBFJCD">read this doc</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing an open licensed book]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2010/05/09/writing-an-open-licensed-book/"/>
    <updated>2010-05-09T22:40:06+02:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2010/05/09/writing-an-open-licensed-book</id>
    <content type="html"><![CDATA[<p>To celebrate last week's release of <a href="http://www.macruby.org/blog/2010/04/30/macruby06.html">MacRuby 0.6</a>, O'Reilly and I started publishing the draft of my MacRuby book online: <a href="http://macruby.labs.oreilly.com/">http://macruby.labs.oreilly.com/</a></p>

<p>I started thinking about working on "<a href="http://macruby.labs.oreilly.com/">MacRuby: The Definitive Guide</a>" last year when I realized that the project had a great future but there was a serious lack of documentation. With the support of the MacRuby team, I worked on a table of contents and a pitch. The next step was to decide what we wanted to do with the book.</p>

<p>I know a lot of technical book authors and most of them will tell you the same thing: if you think that you are going to make money writing a book, you are wrong. Even if your book sells well, because of the time invested in writing the book, you are probably better off doing consulting work and charging by the hour.</p>

<p>So since day one, I knew that this project would not make me rich. The goal was to share knowledge not to reimburse my mortgage or save California from bankruptcy. While publishing a web book is great, distribution is quite limited, especially if you try to reach people outside of your network. That's why I decided to start talking to a few publishers. Most publishers I talked to were interested in working on the book, however they were not really keen on publishing a <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/us/">Creative Commons Attribution-Noncommercial-No Derivative</a> licensed book.</p>

<p>Let me explain why I think releasing technical books under a CC license is important. As you might know (or have figured out by now), I am not a native English speaker. I actually learned my first English words thanks to the computer my dad had at home. The problem when you don't live in an English speaking country and you want to learn about the cutting edge technology is that you have to understand English.Â  Thanks to the Internet, learning and practicing English is now much easier that it used to be. However, if you want to have access to books, most of the time you have to wait until someone translates the book and publishes it in your country or you have to manage to get an English version delivered to your country. This is often a pain because of national credit card limitations, international delivery restrictions etc... If you manage to find a way to get a copy, the book ends up costing a lot of money.</p>

<p>What does that mean in practice? Most of the technical books are first available in the English speaking western world, then slowly translated and/or distributed around the world. By the time you get a legal copy in Bolivia, Algeria or Vietnam, a new edition is probably out in the US probably because the technology evolved. Maybe that explains some of the book piracy worldwide?</p>

<p>Think about it for a minute: knowledge is power and time is money. And what do we do? We delay knowledge distribution. This is why I am a big fan of the <a href="http://khanacademy.org/">Khan Academy</a> and its awesome free online courses.</p>

<p>Turns out <a href="http://oreilly.com/">O'Reilly</a> shares my vision and has already published a lot of books under various open licenses: <a href="http://oreilly.com/openbook/">http://oreilly.com/openbook/</a> I was also interested in publishing the content of my book ASAP so people could access it right away even though there would be lots of typos and missing content. This is also something O'Reilly has already done with the <a href="http://books.couchdb.org/relax/">CouchDB</a> and the <a href="http://labs.oreilly.com/ofps.html">Scala</a> books.</p>

<p>Talking with <a href="http://twitter.com/janl">Jan Lehnardt</a> about his experience working with O'Reilly on the <a href="http://books.couchdb.org/relax/">'CouchDB: The definitive guide'</a> book, I realized that we seem to have some shared interests. I contacted Jan's editor and we decided to start working on the MacRuby book. The book will be available later on in all the usual commercial formats and I hope people will show their support so O'Reilly will be encouraged in their choice to continue publishing CC licensed book. At the end of the day, purchasing a CC licensed book helps supporting the authors, the publishers but also all the people who can't have access to the latest technical books.</p>

<p>Finally, working on a book is not an easy thing, especially when you have to write it in a language that's not yours. But I have to say that the community support has been amazing. Even <a href="http://daringfireball.net/linked/2010/05/03/macruby-aimonetti">John Gruber sent a fireball my way</a>. And since the announcement was made, I have received a lot of <a href="http://macruby.labs.oreilly.com/comments/feed?id=book">comments</a>, tweets, emails etc... It is very encouraging and it gives me the motivation needed to work on the book after a long work day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Undo/Redo in MacRuby]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2010/02/02/undoredo-in-macruby/"/>
    <updated>2010-02-02T02:19:44+01:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2010/02/02/undoredo-in-macruby</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacRuby 0.5 final is out]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2010/01/31/macruby-0-5-final-is-out/"/>
    <updated>2010-01-31T19:13:36+01:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2010/01/31/macruby-0-5-final-is-out</id>
    <content type="html"><![CDATA[<p>After going through two betas, MacRuby 0.5 final is now released and can be downloaded by clicking on the icon below:</p>

<p><a href="http://macruby.org/downloads.html"><img src="http://macruby.org/images/zip.png" alt="" />
MacRuby 0.5</a></p>

<p>Don't worry about having MacRuby and Ruby 1.8.x or 1.9 installed, MacRuby is namespaced and won't affect your current Ruby installations, just download and launch the installer. (Note: The build was compiled for SnowLeopard only)</p>

<p>You can read all the <a href="http://www.macruby.org/blog/2010/01/31/macruby05.html">details of the release on the MacRuby website</a>.</p>

<p>So what changed since 0.4? Too many things for me to list them here but basically 0.5 uses LLVM to compile code and make MacRuby faster and integrate better with the Obj-c runtime. However since the last beta, here is what changed:</p>

<ul>
<li><p>HotCocoa is now a separate gem</p></li>
<li><p>improved AOT compilation</p></li>
<li><p>Grand Central Dispatch support - use all your cores without the pain of threads. Read <a href="http://www.macruby.org/documentation/gcd.html">this post</a> for more info.</p></li>
</ul>


<p>0.5 is a solid release which I consider production ready, I personally wrote a few of small Cocoa apps in MacRuby and everything has been working very well. Of course, I'm also excited about the new stuff in 0.6 trunk like the debugger previewed a few weeks ago: <a href="http://merbist.com/2010/01/18/how-to-detect-cylons-with-macruby/">http://merbist.com/2010/01/18/how-to-detect-cylons-with-macruby/</a> but also some drastic changes in the primitive classes that I might cover later on.</p>

<p>Finally, people are asking if the iPad will be able to run apps running in MacRuby. Unfortunately, the current answer is: no. The two issues with the IPhone/iP*d OS are the lack of Garbage Collector and support for BridgeSupport (needed to define CocoaTouch constants available from MacRuby). However, this matter is being discussed on the mailing list and progress is made by contributors (the core team primarily focusing on the desktop).</p>

<p>That is going to be an exciting Ruby week as MacRuby 0.5 is now out and Rails 3 beta/RC0 is expected really soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to detect Cylons with MacRuby]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2010/01/18/how-to-detect-cylons-with-macruby/"/>
    <updated>2010-01-18T16:13:37+01:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2010/01/18/how-to-detect-cylons-with-macruby</id>
    <content type="html"><![CDATA[<p>Over the weekend, MacRuby's trunk became version 0.6 and the bug fixing is currently done in both the 0.5 branch and trunk. Based on MacRuby's usual release cycle I would expect a 0.5 beta3 or 0.5 final to be released soon so most of the work can be focused on trunk.</p>

<p>I'll let you check on the <a href="http://svn.macosforge.org/repository/ruby/MacRuby/trunk/TODO">TODO list</a> to see what was done in 0.5 and what is in the plan for 0.6.</p>

<p>However, there is one feature in 0.6 that I know lots of you will just love! The good news is that Laurent already committed a very early version of his work so I figured, I should share the good news with you:</p>

<h3>Introducing MacRuby's debugger!</h3>

<p>If you were expecting to read: "a Cylon detector!", keep on reading.</p>

<p>Again, this feature is in really early development since it's scheduled for 0.6 and 0.5 final is not out yet. But if you install MacRuby using the <a href="http://macruby.icoretech.org/">nightly builds</a> or build from trunk, you can already play with the debugger.</p>

<p>Let me give you a really quick tour of the debugger.</p>

<p><img src="http://img.skitch.com/20100118-qn7yuq9h2ce61yxt6kwag9pnbt.jpg" alt="BSG75Logo posted by Matt Aimonetti" /></p>

<p>Let's imagine that we were given the task to debug the cylon detector written by Gaius Baltar which looks like that:</p>

<pre><code>characters = %w{Adama Apollo Baltar Roslin StarBuck Six}

def cylon?(character)
  false
end

characters.each do |character|
  if cylon?(character)
    puts "#{character} is a Cylon!"
  else
    puts "#{character} is not a cylon."
  end
end
</code></pre>

<p>Here is what happens when I execute the script:</p>

<pre><code>$ macruby cylon_detector.rb 
Adama is not a cylon.
Apollo is not a cylon.
Baltar is not a cylon.
Roslin is not a cylon.
StarBuck is not a cylon.
Six is not a cylon.
</code></pre>

<p>The only problem is that we all know that Six is a Cylon, the detector isn't working right so let's debug it:</p>

<pre><code>$ macrubyd cylon_detector.rb
Starting program.
cylon_detector.rb:1&gt; b cylon_detector.rb:8 if character == 'Six'
Added breakpoint 1.
cylon_detector.rb:1&gt; c
Adama is not a cylon.
Apollo is not a cylon.
Baltar is not a cylon.
Roslin is not a cylon.
StarBuck is not a cylon.
cylon_detector.rb:8&gt; p cylon?(character)
=&gt; false
cylon_detector.rb:8&gt; p "This detector is broken!"
=&gt; "This detector is broken!"
cylon_detector.rb:8&gt; p def cylon?(character); character == 'Six'; end
=&gt; nil
cylon_detector.rb:8&gt; p cylon?(character)
=&gt; true
cylon_detector.rb:8&gt; p cylon?('Matt')
=&gt; false
cylon_detector.rb:8&gt; c
Six is a Cylon!
Program exited.
</code></pre>

<p>The first thing we do is to add a conditional breakpoint:</p>

<pre><code>b cylon_detector.rb:8 if character == 'Six'
</code></pre>

<p>Basically, the debugger will add a breakpoint at line 8 which will only be active when the value of 'character' is equal to 'Six'.
Now that the breakpoint added, we can continue the program execution and just wait until we reach the defined condition.</p>

<pre><code>cylon_detector.rb:1&gt; c
</code></pre>

<p>Once we reach the breakpoint, we evaluate the result of "cylon?(character)" by using the p command. We see that the result is "false" when we know for sure that it should be true since the value of the character variable is 'Six' and she is a cylon. At this point, you might have guessed that somewhat acted as a cylon agent and I pretended to fix the problem by overwriting the "cylon?" method:</p>

<pre><code>cylon_detector.rb:8&gt; p def cylon?(character); character == 'Six'; end
</code></pre>

<p>Now that the method is overwritten, I can check that Six is recognized as being a cylon:</p>

<pre><code>cylon_detector.rb:8&gt; p cylon?(character)
=&gt; true
</code></pre>

<p>and also check that I am not detected a cylon:</p>

<pre><code>cylon_detector.rb:8&gt; p cylon?('Matt')
=&gt; false
</code></pre>

<p>I can now continue the execution of the program and see that Six is detected as a Cylon!</p>

<p>Of course this is just a very early version of the debugger and we will see lots of improvement in the next few weeks. Who knows someone might even create a GUI for the debugger and/or a Xcode integration.</p>

<p>Anyway, the point being that MacRuby developers should expect a lot of awesome stuff coming up their way soon. (also be careful about the skin jobs around you, cylon detectors can't be trusted!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controlling iTunes with MacRuby]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2010/01/17/controlling-itunes-with-macruby/"/>
    <updated>2010-01-17T19:54:19+01:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2010/01/17/controlling-itunes-with-macruby</id>
    <content type="html"><![CDATA[<p>Since Mac OS X v10.5, Apple added a technology called Scripting Bridge which allows to control and communicate with scriptable applications such as Mail, iChat or iTunes.</p>

<p>A few weeks back, <a href="http://merbist.com/2009/12/31/im-new-year-count-down-with-macruby/">I showed how to control iChat</a> with MacRuby. This time I'm going to show you how to control iTunes.</p>

<p>Here is a small script that I wrote to wake me up in music every morning.</p>

<pre><code>#!/usr/local/bin/macruby
framework 'Foundation'
framework 'ScriptingBridge'

itunes = SBApplication.applicationWithBundleIdentifier("com.apple.itunes")
load_bridge_support_file 'iTunes.bridgesupport'
itunes.run

class SBElementArray
  def [](value)
    self.objectWithName(value)
  end
end

itunes.stop
playlist = itunes.sources["Library"].userPlaylists["morning"]
playlist.playOnce(false) if playlist
</code></pre>

<p>The idea is that I have a Mac Mini streaming music through speakers connected to an AirportExpress in my bedroom.</p>

<p>Let's go through the script quickly.</p>

<p>We start by loading two frameworks, Foundation and ScriptingBridge.
Now that we have ScriptingBridge loaded, we can control iTunes. To do that, we use:
SBApplication.applicationWithBundleIdentifier("com.apple.itunes")
We then load a bridgesupport file that contains the enumerated constants from the iTunes scriptable dictionary.</p>

<p>We make sure iTunes is running by calling #run on the application object.</p>

<p>Before using iTune scriptable interface, we are making the API a bit nicer, it's totally unnecessary but it makes our code look better.</p>

<p>itunes.sources returns an instance of <a href="http://developer.apple.com/mac/library/documentation/cocoa/Reference/SBElementArray_Class/SBElementArray/SBElementArray.html">SBElementArray</a> which is not really an array nor a hash.</p>

<p>The rest of the code is pretty simple, we find the library, find the playlist called 'morning' and play it if found.</p>

<p>So you might wonder two things:</p>

<ul>
<li><p>What is the iTunes.bridgesupport file?</p></li>
<li><p>How do you know what methods are available to control iTunes?</p></li>
</ul>


<h4>bridgesupport file</h4>

<p>The bridgesupport file is important since it defines the required constants.
Apple provides a metadata generator called gen_bridge_metadata which generates a bridgesupport file.</p>

<p>Here is what the documentation says:</p>

<pre><code>$ man gen_bridge_metadata




NAME
gen_bridge_metadata -- Objective-C Bridges Metadata Generator

SYNOPSIS
gen_bridge_metadata [options...] headers...

DESCRIPTION
gen_bridge_metadata is a tool that generates bridging metadata information for a given framework or set of head-
ers. The Objective-C bridges supported in Mac OS X, such as RubyCocoa (Ruby) and PyObjC (Python), read this
information at runtime.

Metadata files describe the parts of an Objective-C framework that the bridges cannot automatically handle. These
are primarily the ANSI C elements of the framework -- functions, constants, enumerations, and so on -- but also
include special cases such as functions or methods that accept pointer-like arguments. These special cases must
be manually specified in separate files called exceptions. The gen_bridge_metadata tool can then read in the
exceptions file when it generates the framework metadata.

The file extension used for metadata files should be .bridgesupport.

Certain elements, such as inline functions, cannot be described in the metadata files. It is therefore required
to generate a dynamic library in order to make the bridges use them. The gen_bridge_metadata tool can take care
of that for you.

The file extension for the dynamic libraries should be .dylib.

You should install metadata files in one of three filesystem locations. For example, for a framework named
MyFramework that is installed as /Library/Frameworks/MyFramework.framework, you can install the
MyFramework.bridgesupport and MyFramework.dylib files in one of the following possible locations, in order of
priority:

oÂ Â  /Library/Frameworks/MyFramework/Resources/BridgeSupport

oÂ Â  /Library/BridgeSupport

oÂ Â  ~/Library/BridgeSupport
</code></pre>

<p>The problem is that we don't have a framework or header file to generate a bridgesupport file for.
So, what we need a header file for iTunes, turns out we have a tool to do that:</p>

<pre><code>$ sdef /Applications/iTunes.app | sdp -fh --basename iTunes
</code></pre>

<p>I won't go in the details of what sdef and sdp do, just check their manual page.
Running the command above will create a iTunes.h which we can use to create a bridgesupport file.
Here is the generated header file: http://gist.github.com/279657</p>

<p>Now, let's create a bidgesupport file:</p>

<pre><code>$ gen_bridge_metadata -c '-I.' iTunes.h &gt; iTunes.bridgesupport
</code></pre>

<p>An that's how we get the bridgesupport file. (see file: <a href="http://gist.github.com/279698">http://gist.github.com/279698</a>)</p>

<h4>iTunes Documentation</h4>

<p>The easiest way to understand what's available to you is to open iTunes' dictionary in the AppleScript Editor.</p>

<p><img src="http://img.skitch.com/20100118-fe5c3224jd8xfhciwqxpy4hptc.jpg" alt="iTunes API by Matt Aimonetti" /></p>

<p>Otherwise you can study the iTunes.h file.</p>

<p>I wrote a very dumb parser to give you an idea of the methods and properties available when controlling iTunes via ScriptingBridge, here is theÂ  output:</p>

<pre><code>Class: iTunesPrintSettings
Properties:
copies (the number of copies of a document to be printed)
collating (Should printed copies be collated?)
startingPage (the first page of the document to be printed)
endingPage (the last page of the document to be printed)
pagesAcross (number of logical pages laid across a physical page)
pagesDown (number of logical pages laid out down a physical page)
errorHandling (how errors are handled)
requestedPrintTime (the time at which the desktop printer should print the document)
printerFeatures (printer specific options)
faxNumber (for fax number)
targetPrinter (for target printer)

Method: printPrintDialog:(BOOL)printDialog withProperties:(iTunesPrintSettings *)withProperties kind:(iTunesEKnd)kind theme:(NSString *)theme
Returned: void
Print the specified object(s)
----
Method: close
Returned: void
Close an object
----
Method: delete
Returned: void
Delete an element from an object
----
Method: duplicateTo:(SBObject *)to
Returned: SBObject
Duplicate one or more object(s)
----
Method: exists
Returned: BOOL
Verify if an object exists
----
Method: open
Returned: void
open the specified object(s)
----
Method: playOnce:(BOOL)once
Returned: void
play the current track or the specified track or file.
----

Class: iTunesApplication
Properties:
currentEncoder (the currently selected encoder (MP3, AIFF, WAV, etc.))
currentEQPreset (the currently selected equalizer preset)
currentPlaylist (the playlist containing the currently targeted track)
currentStreamTitle (the name of the current song in the playing stream (provided by streaming server))
currentStreamURL (the URL of the playing stream or streaming web site (provided by streaming server))
currentTrack (the current targeted track)
currentVisual (the currently selected visual plug-in)
EQEnabled (is the equalizer enabled?)
fixedIndexing (true if all AppleScript track indices should be independent of the play order of the owning playlist.)
frontmost (is iTunes the frontmost application?)
fullScreen (are visuals displayed using the entire screen?)
name (the name of the application)
mute (has the sound output been muted?)
playerPosition (the playerâs position within the currently playing track in seconds.)
playerState (is iTunes stopped, paused, or playing?)
selection (the selection visible to the user)
soundVolume (the sound output volume (0 = minimum, 100 = maximum))
version (the version of iTunes)
visualsEnabled (are visuals currently being displayed?)
visualSize (the size of the displayed visual)

Method: browserWindows
Returned: SBElementArray
----
Method: encoders
Returned: SBElementArray
----
Method: EQPresets
Returned: SBElementArray
----
Method: EQWindows
Returned: SBElementArray
----
Method: playlistWindows
Returned: SBElementArray
----
Method: sources
Returned: SBElementArray
----
Method: visuals
Returned: SBElementArray
----
Method: windows
Returned: SBElementArray
----
Method: printPrintDialog:(BOOL)printDialog withProperties:(iTunesPrintSettings *)withProperties kind:(iTunesEKnd)kind theme:(NSString *)theme
Returned: void
Print the specified object(s)
----
Method: run
Returned: void
run iTunes
----
Method: quit
Returned: void
quit iTunes
----
Method: add:(NSArray *)x to:(SBObject *)to
Returned: iTunesTrack
add one or more files to a playlist
----
Method: backTrack
Returned: void
reposition to beginning of current track or go to previous track if already at start of current track
----
Method: convert:(NSArray *)x
Returned: iTunesTrack
convert one or more files or tracks
----
Method: fastForward
Returned: void
skip forward in a playing track
----
Method: nextTrack
Returned: void
advance to the next track in the current playlist
----
Method: pause
Returned: void
pause playback
----
Method: playOnce:(BOOL)once
Returned: void
play the current track or the specified track or file.
----
Method: playpause
Returned: void
toggle the playing/paused state of the current track
----
Method: previousTrack
Returned: void
return to the previous track in the current playlist
----
Method: resume
Returned: void
disable fast forward/rewind and resume playback, if playing.
----
Method: rewind
Returned: void
skip backwards in a playing track
----
Method: stop
Returned: void
stop playback
----
Method: update
Returned: void
update the specified iPod
----
Method: eject
Returned: void
eject the specified iPod
----
Method: subscribe:(NSString *)x
Returned: void
subscribe to a podcast feed
----
Method: updateAllPodcasts
Returned: void
update all subscribed podcast feeds
----
Method: updatePodcast
Returned: void
update podcast feed
----
Method: openLocation:(NSString *)x
Returned: void
Opens a Music Store or audio stream URL
----

Class: iTunesItem
Properties:
container (the container of the item)
index (The index of the item in internal application order.)
name (the name of the item)
persistentID (the id of the item as a hexidecimal string. This id does not change over time.)

Method: id
Returned: NSInteger
the id of the item
----
Method: printPrintDialog:(BOOL)printDialog withProperties:(iTunesPrintSettings *)withProperties kind:(iTunesEKnd)kind theme:(NSString *)theme
Returned: void
Print the specified object(s)
----
Method: close
Returned: void
Close an object
----
Method: delete
Returned: void
Delete an element from an object
----
Method: duplicateTo:(SBObject *)to
Returned: SBObject
Duplicate one or more object(s)
----
Method: exists
Returned: BOOL
Verify if an object exists
----
Method: open
Returned: void
open the specified object(s)
----
Method: playOnce:(BOOL)once
Returned: void
play the current track or the specified track or file.
----
Method: reveal
Returned: void
reveal and select a track or playlist
----

Class: iTunesPlaylist
Properties:
duration (the total length of all songs (in seconds))
name (the name of the playlist)
parent (folder which contains this playlist (if any))
shuffle (play the songs in this playlist in random order?)
size (the total size of all songs (in bytes))
songRepeat (playback repeat mode)
specialKind (special playlist kind)
time (the length of all songs in MM:SS format)
visible (is this playlist visible in the Source list?)

Method: tracks
Returned: SBElementArray
----
Method: moveTo:(SBObject *)to
Returned: void
Move playlist(s) to a new location
----
Method: searchFor:(NSString *)for_ only:(iTunesESrA)only
Returned: iTunesTrack
search a playlist for tracks matching the search string. Identical to entering search text in the Search field in iTunes.
----

Class: iTunesAudioCDPlaylist
Properties:
artist (the artist of the CD)
compilation (is this CD a compilation album?)
composer (the composer of the CD)
discCount (the total number of discs in this CDâs album)
discNumber (the index of this CD disc in the source album)
genre (the genre of the CD)
year (the year the album was recorded/released)

Method: audioCDTracks
Returned: SBElementArray
----

Class: iTunesDevicePlaylist
Method: deviceTracks
Returned: SBElementArray
----

Class: iTunesLibraryPlaylist
Method: fileTracks
Returned: SBElementArray
----
Method: URLTracks
Returned: SBElementArray
----
Method: sharedTracks
Returned: SBElementArray
----

Class: iTunesRadioTunerPlaylist
Method: URLTracks
Returned: SBElementArray
----

Class: iTunesSource
Properties:
capacity (the total size of the source if it has a fixed size)
freeSpace (the free space on the source if it has a fixed size)
kind ()

Method: audioCDPlaylists
Returned: SBElementArray
----
Method: devicePlaylists
Returned: SBElementArray
----
Method: libraryPlaylists
Returned: SBElementArray
----
Method: playlists
Returned: SBElementArray
----
Method: radioTunerPlaylists
Returned: SBElementArray
----
Method: userPlaylists
Returned: SBElementArray
----
Method: update
Returned: void
update the specified iPod
----
Method: eject
Returned: void
eject the specified iPod
----

Class: iTunesTrack
Properties:
album (the album name of the track)
albumArtist (the album artist of the track)
albumRating (the rating of the album for this track (0 to 100))
albumRatingKind (the rating kind of the album rating for this track)
artist (the artist/source of the track)
bitRate (the bit rate of the track (in kbps))
bookmark (the bookmark time of the track in seconds)
bookmarkable (is the playback position for this track remembered?)
bpm (the tempo of this track in beats per minute)
category (the category of the track)
comment (freeform notes about the track)
compilation (is this track from a compilation album?)
composer (the composer of the track)
databaseID (the common, unique ID for this track. If two tracks in different playlists have the same database ID, they are sharing the same data.)
dateAdded (the date the track was added to the playlist)
objectDescription (the description of the track)
discCount (the total number of discs in the source album)
discNumber (the index of the disc containing this track on the source album)
duration (the length of the track in seconds)
enabled (is this track checked for playback?)
episodeID (the episode ID of the track)
episodeNumber (the episode number of the track)
EQ (the name of the EQ preset of the track)
finish (the stop time of the track in seconds)
gapless (is this track from a gapless album?)
genre (the music/audio genre (category) of the track)
grouping (the grouping (piece) of the track. Generally used to denote movements within a classical work.)
kind (a text description of the track)
longDescription ()
lyrics (the lyrics of the track)
modificationDate (the modification date of the content of this track)
playedCount (number of times this track has been played)
playedDate (the date and time this track was last played)
podcast (is this track a podcast episode?)
rating (the rating of this track (0 to 100))
ratingKind (the rating kind of this track)
releaseDate (the release date of this track)
sampleRate (the sample rate of the track (in Hz))
seasonNumber (the season number of the track)
shufflable (is this track included when shuffling?)
skippedCount (number of times this track has been skipped)
skippedDate (the date and time this track was last skipped)
show (the show name of the track)
sortAlbum (override string to use for the track when sorting by album)
sortArtist (override string to use for the track when sorting by artist)
sortAlbumArtist (override string to use for the track when sorting by album artist)
sortName (override string to use for the track when sorting by name)
sortComposer (override string to use for the track when sorting by composer)
sortShow (override string to use for the track when sorting by show name)
size (the size of the track (in bytes))
start (the start time of the track in seconds)
time (the length of the track in MM:SS format)
trackCount (the total number of tracks on the source album)
trackNumber (the index of the track on the source album)
unplayed (is this track unplayed?)
videoKind (kind of video track)
volumeAdjustment (relative volume adjustment of the track (-100% to 100%))
year (the year the track was recorded/released)

Method: artworks
Returned: SBElementArray
----

Class: iTunesFileTrack
Properties:
location (the location of the file represented by this track)

Method: refresh
Returned: void
update file track information from the current information in the trackâs file
----

Class: iTunesURLTrack
Properties:
address (the URL for this track)

Method: download
Returned: void
download podcast episode
----

Class: iTunesUserPlaylist
Properties:
shared (is this playlist shared?)
smart (is this a Smart Playlist?)

Method: fileTracks
Returned: SBElementArray
----
Method: URLTracks
Returned: SBElementArray
----
Method: sharedTracks
Returned: SBElementArray
----
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IM new year countdown with MacRuby]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2009/12/31/im-new-year-count-down-with-macruby/"/>
    <updated>2009-12-31T10:25:50+01:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2009/12/31/im-new-year-count-down-with-macruby</id>
    <content type="html"><![CDATA[<p>Here is the geekiest way I found to wish Happy New Year to my IM contacts:</p>

<p><img src="http://img.skitch.com/20091231-c9t2n9889rxiinux6qsfhqtxfq.jpg" alt="" /></p>

<pre><code>framework 'ScriptingBridge'
app = SBApplication.applicationWithBundleIdentifier("com.apple.iChat")
original_status = app.statusMessage
new_year = Time.mktime(2010, 1, 1, 0, 0)

loop do
  now = Time.now
  time_left = (new_year - now).ceil
  if time_left &gt; 0
    app.statusMessage = "#{time_left} seconds left until 2010 (EST)"
  else
    app.statusMessage = "Happy New Year 2010!"
    exit
  end
  sleep(1)
end
</code></pre>

<p>If you are alone at home playing WOW,Â  you can also trigger iTunes to play a mp3 file with crowd noise and people shouting '<strong>Happy New Year 2010</strong>'!</p>

<p><img src="http://img.skitch.com/20091231-c5j9dhhy46t76gh26fu6a26h7c.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun with MacRuby]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2009/12/29/fun-with-macruby/"/>
    <updated>2009-12-29T19:09:45+01:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2009/12/29/fun-with-macruby</id>
    <content type="html"><![CDATA[<p>To be ready for 2010, I'm taking some time off relaxing and spending time with my family in Florida.</p>

<p>During my free time, I've been reading, catching up on movies and TV shows and worked on the MacRuby book that I am writing for O'Reilly.</p>

<p>I wrote a bunch of small apps, played with various APIs and every single time I was amazed by all the goodies Apple makes available to developers. My most recent discovery is very simple but I wanted to share it with you.</p>

<p>I often type text in English, French and Spanish and I even mix the languages from time to time. SnowLeopard comes with a great spellchecker that auto detects the language I'm typing in and is most of the time correct. It's a very impressive feature and I was wondering if, as a MacRuby developer, I could use one of Apple's lib to detect what language is being used.Â  I dug through the documentation but didn't find anything. I started looking at some header files and found the API to use :)</p>

<pre><code>framework 'Foundation'
class String
  def language
    CFStringTokenizerCopyBestStringLanguage(self, CFRangeMake(0, self.size))
  end
end

puts "Bonne annÃ©e!".language
# =&gt; "fr"
puts "Happy new year!".language
# =&gt; "en"
puts "Â¡Feliz aÃ±o nuevo!".language
# =&gt; "es"
puts "Felice anno nuovo!".language
# =&gt; "it"
puts "Ø£Ø¹ÙØ§Ø¯ Ø³Ø¹ÙØ¯Ø©".language
# =&gt; "ar"
puts "æãã¾ãã¦ããã§ã¨ããããã¾ãã".language
# =&gt; "ja"
</code></pre>

<p>The documentation says that the result is not guaranteed to be accurate and that typically 200-400 characters are required to reliably guess the language of a string. (<a href="http://developer.apple.com/mac/library/documentation/CoreFoundation/Reference/CFStringTokenizerRef/Reference/reference.html#//apple_ref/c/func/CFStringTokenizerCopyBestStringLanguage">CFStringTokenizer Doc</a>)</p>

<p>Probably not the most useful piece of code, but really cool none the less :)</p>

<p>Happy new year!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacRuby tips: browse for folder or file dialog]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2009/10/25/macruby-browse-for-folder-or-file-dialog/"/>
    <updated>2009-10-25T15:52:14+01:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2009/10/25/macruby-browse-for-folder-or-file-dialog</id>
    <content type="html"><![CDATA[<p>This is yet another pretty simple tip.
Use case: let say you want your applications users to choose one or multiple files or folder on their file system. A good example would be that you want the user to choose a file to process or a folder where to save some data.</p>

<p><img src="http://img.skitch.com/20091025-nc89xd2ywqutqqddnwm2met3x4.jpg" alt="" /></p>

<p>In the example above, I added a browse button and a text field.</p>

<p>I would like my users to click on the browse button, locate a folder and display it in the text field.</p>

<p>In your MacRuby controller, use a simple action method as well as an accessor to the text field:</p>

<pre><code>attr_accessor :destination_path

def browse(sender)
end
</code></pre>

<p>Now, in Interface builder bind the destination_path outlet to the text field you want to use to display the path and bind the button to the browse action.</p>

<p>Let's go back to our action method and let's create a dialog panel, set some options and handle the user selection:</p>

<pre><code>def browse(sender)
  # Create the File Open Dialog class.
  dialog = NSOpenPanel.openPanel
  # Disable the selection of files in the dialog.
  dialog.canChooseFiles = false
  # Enable the selection of directories in the dialog.
  dialog.canChooseDirectories = true
  # Disable the selection of multiple items in the dialog.
  dialog.allowsMultipleSelection = false

  # Display the dialog and process the selected folder
  if dialog.runModalForDirectory(nil, file:nil) == NSOKButton
  # if we had a allowed for the selection of multiple items
  # we would have want to loop through the selection
    destination_path.stringValue = dialog.filenames.first
  end
end
</code></pre>

<p>That's it, your user can now browse for a folder and the selection will be displayed in the text field. Look at the <a href="http://developer.apple.com/mac/library/documentation/Cocoa/Reference/ApplicationKit/Classes/NSOpenPanel_Class/Reference/Reference.html">NSOpenPanel documentation</a> for more details on the Cocoa API.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacRuby tips: capturing keyboard events]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2009/10/09/macruby-tips-capturing-keyboard-events/"/>
    <updated>2009-10-09T19:24:04+02:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2009/10/09/macruby-tips-capturing-keyboard-events</id>
    <content type="html"><![CDATA[<p>If you are writing any type of games you might want your users to interact with your application using their keyboards.</p>

<p>This is actually not that hard. The approach is simple and fast forward if you are used to Cocoa.</p>

<p>Everything starts in Interface Builder, add a custom view instance to your window.</p>

<p><img src="http://img.skitch.com/20091010-8tf834wf9se6y81h2jf7a7e5he.jpg" alt="" /></p>

<p>Now switch to your project and a new file with a class called KeyboardControlView and make in inherit from NSView. We are creating a subview of NSView so we will be able to make our top view "layer" use this subclass.</p>

<pre><code>class KeyboardControlView &lt; NSView
  attr_accessor :game_controller

  def acceptsFirstResponder
    true
  end

end
</code></pre>

<p>As you can see in the example above, I added an attribute accessor. attr_accessor class method creates getters and setters. It's basically the same as writing:</p>

<pre><code> def game_controller=(value)
  @game_controller = value
end

def game_controller
  @game_controller
end
</code></pre>

<p>MacRuby is keeping an eye on these accessors and let bind outlets to them.
But let's not get ahead of ourselves, we'll keep that for another time.</p>

<p>Let's go back to our newly created class. Notice, we also added a method called <code>
[acceptsFirstResponder](http://developer.apple.com/mac/library/documentation/Cocoa/Reference/ApplicationKit/Classes/NSResponder_Class/Reference/Reference.html#//apple_ref/occ/instm/NSResponder/acceptsFirstResponder)</code> and returns true. <a href="http://developer.apple.com/mac/library/documentation/Cocoa/Reference/ApplicationKit/Classes/NSResponder_Class/Reference/Reference.html#//apple_ref/occ/instm/NSResponder/acceptsFirstResponder">acceptsFirstResponder</a> returns false by default.
But in this case we want it to return true so our new class instance can be first in the responder chain.</p>

<p>Now that our class is ready, let's go back to Interface Builder, select our new custom view and click on the inspector button.</p>

<p><img src="http://img.skitch.com/20091010-1trkxhw2r2paaik3ipa4gtytgg.jpg" alt="" />
Click on the (i) icon and in the Class field choose our new KeyboardControlView.
Yep, our new class just shows up by magic, it's also called the lrz effect, just don't ask ;)
So now when our application starts, a new instance of our NSView class is created and Cocoa will call different methods based on events triggered.</p>

<p>The two methods we are interested in reimplementing are keyDown and keyUp. They get called when a key gets pressed or released.</p>

<pre><code>def keyDown(event)
  characters = event.characters
  if characters.length == 1 &amp;&amp; !event.isARepeat
    character = characters.characterAtIndex(0)
    if character == NSLeftArrowFunctionKey
      puts "LEFT pressed"
    elsif character == NSRightArrowFunctionKey
      puts "RIGHT pressed"
    elsif character == NSUpArrowFunctionKey
      puts "UP pressed"
    elsif character == NSDownArrowFunctionKey
      puts "DOWN pressed"
    end
  end
 super
end
</code></pre>

<p>I don't think the code above needs much explanation. The only things that you might not understand are 'event.isARepeat'. This method returns true if the user left his/her finger on the key. The other thing is the use of the 'super' call at the end of the method. Basically, we reopened a method that was already defined and we don't want to just overwrite it, we just want to inject out code within the existing method, so once we are done handling the event, we just pass it back to original method.</p>

<p>Final result:</p>

<pre><code>class KeyboardControlView &lt; NSView
  attr_accessor :game_controller

  def acceptsFirstResponder
    true
  end

  def keyDown(event)
    characters = event.characters
    if characters.length == 1 &amp;&amp; !event.isARepeat
      character = characters.characterAtIndex(0)
      if character == NSLeftArrowFunctionKey
        puts "LEFT pressed"
      elsif character == NSRightArrowFunctionKey
        puts "RIGHT pressed"
      elsif character == NSUpArrowFunctionKey
        puts "UP pressed"
      elsif character == NSDownArrowFunctionKey
    puts "DOWN pressed"
      end
    end
    super
  end

  # Deals with keyboard keys being released
  def keyUp(event)
    characters = event.characters
    if characters.length == 1
      character = characters.characterAtIndex(0)
      if character == NSLeftArrowFunctionKey
       puts "LEFT released"
      elsif character == NSRightArrowFunctionKey
        puts "RIGHT released"
Â      elsif character == NSUpArrowFunctionKey
       puts "UP released"
      elsif character == NSDownArrowFunctionKey
        puts "DOWN released"
      end
    end
    super
  end

end
</code></pre>

<p>Now it's up to you to handle the other keystrokes and do whatever you want. That's it for this tip, I hope it helps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacRuby 0.5 beta 1 and Textorize]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2009/10/07/macruby-0-5-beta-1-and-textorize/"/>
    <updated>2009-10-07T20:45:02+02:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2009/10/07/macruby-0-5-beta-1-and-textorize</id>
    <content type="html"><![CDATA[<p>Good news everyone!</p>

<p>MacRuby beta 1 has been released! <a href="http://www.macruby.org/blog/2009/10/07/macruby05b1.html">Official announcement here</a>.</p>

<p>[caption id="" align="aligncenter" width="144" caption="Download MacRuby 0.5 beta1"]<a href="http://www.macruby.org/files/MacRuby%200.5%20beta%201.zip"><img src="http://www.macruby.org/images/zip.png" alt="Download MacRuby 0.5 beta1" /></a>[/caption]</p>

<p>Note that the download is only for SnowLeopard, intel machines.</p>

<p>Lots of great stuff in this new release, the first one based on LLVM. Check the <a href="http://www.macruby.org/blog/2009/10/07/macruby05b1.html">Laurent's post</a> to learn more about the work done on compilation, optimization, concurrency, compatibility and Cocoa interaction. And a big thank you to <a href="http://www.youtube.com/watch?v=BVgM7qeAlko">Laurent Sansonetti</a> who is putting so much effort in this project!</p>

<p>However, don't forget it's still a beta release and you might encounter bugs. Feel free to report them in the bug tracker or ask on the mailing list.</p>

<p>On a different topic, the other day, John Gruber from <a href="http://daringfireball.net/">Daring Fireball</a> <a href="http://daringfireball.net/linked/2009/09/30/textorize">wrote a quick note</a> about <a href="http://mir.aculo.us/2009/09/29/textorize-pristine-font-rendering-for-the-web/">Thomas Fuchs' textorize script</a> which since got its own place on the internet <a href="http://textorize.org/">http://textorize.org/</a>.</p>

<p>Textorize is a Ruby-based font rasterizer command line utility for Mac OS X. It generates PNG files from an input string and options, using Mac OS X's pristine typography facilities. As John said, it's a case where a few lines of Ruby code beat Photoshop.</p>

<p>Thomas version is based on RubyCocoa which is great... but not MacRuby.</p>

<p>To celebrate<a href="http://www.macruby.org/blog/2009/10/07/macruby05b1.html"> MacRuby 0.5 beta1</a>, I ported the gem over and pushed it to the excellent <a href="http://gemcutter.org/">gemcutter.org facility</a>.</p>

<p>After installing MacRuby beta, follow these directives:</p>

<pre><code>$ macgem sources -a http://gemcutter.org
$ sudo macgem install textorize-mr
$ textorize -f"Didot" -s200 "MacRuby 0.5b1"
$ open output.png
</code></pre>

<p>And you will get a <a href="http://en.wikipedia.org/wiki/Subpixel_antialiasing">subpixel antialiased</a> fancy bitmap like that:</p>

<p><img src="http://merbist.com/wp-content/uploads/2009/10/macruby05b1.png" alt="macruby05b1" /></p>

<p>Check <a href="http://textorize.org/">http://textorize.org/</a> for more examples and <a href="http://github.com/mattetti/textorize">http://github.com/mattetti/textorize</a> for the source code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacRuby tips: how to play an audio file]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2009/10/06/macruby-tips-how-to-play-an-audio-file/"/>
    <updated>2009-10-06T19:00:08+02:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2009/10/06/macruby-tips-how-to-play-an-audio-file</id>
    <content type="html"><![CDATA[<p>Let's say you would like to play an audio file in your MacRuby app/script, how would you do?
It's actually pretty simple, you just need to use NSSound. If we wanted to use a system sound we could do:</p>

<pre><code>NSSound.soundNamed('Basso').play
</code></pre>

<p>But let's look at a more advanced example with some Cocoa patterns. We will loop through all the audio files in a folder and we will play them one after the other.</p>

<pre><code>#!/usr/bin/env macruby
framework 'Cocoa'
# Cocoa documentation reference:
# http://developer.apple.com/mac/library/documentation/Cocoa/Reference/ApplicationKit/Classes/NSSound_Class/Reference/Reference.html

def play_sound
  if @sounds.empty?
    NSApplication.sharedApplication.terminate(nil)
  else
    sound_file = @sounds.shift
    s = NSSound.alloc.initWithContentsOfFile(sound_file, byReference: false)
    puts "previewing #{sound_file}"
    s.delegate = self
    s.play
  end
end

# This is a delegate method called by the sound object
def sound(sound, didFinishPlaying: state)
  play_sound if state
end

# Delegate method called when the app finished loading
def applicationDidFinishLaunching(notification)
  @sounds = Dir.glob("/System/Library/Sounds/*.aiff")
  play_sound
end

# We are delegating the application to self so the script will know when
# it finished loading
NSApplication.sharedApplication.delegate = self
NSApplication.sharedApplication.run
</code></pre>

<p>On my machine, I get the following output:</p>

<pre><code>$ macruby macrubysound.rb
previewing /System/Library/Sounds/Basso.aiff
previewing /System/Library/Sounds/Blow.aiff
previewing /System/Library/Sounds/Bottle.aiff
previewing /System/Library/Sounds/Frog.aiff
previewing /System/Library/Sounds/Funk.aiff
previewing /System/Library/Sounds/Glass.aiff
previewing /System/Library/Sounds/Hero.aiff
previewing /System/Library/Sounds/Morse.aiff
previewing /System/Library/Sounds/Ping.aiff
previewing /System/Library/Sounds/Pop.aiff
previewing /System/Library/Sounds/Purr.aiff
previewing /System/Library/Sounds/Sosumi.aiff
previewing /System/Library/Sounds/Submarine.aiff
previewing /System/Library/Sounds/Tink.aiff
</code></pre>

<p>Cocoa delegation might seem a bit strange at first when you come from Ruby. In Ruby we rarely do any type of async delegation so let's quickly look at what's going on in this script.</p>

<p>The first thing we do is loading the cocoa framework which makes total sense, then we define a bunch of methods and finally we get to:</p>

<pre><code>NSApplication.sharedApplication.delegate = self
NSApplication.sharedApplication.run
</code></pre>

<p>We are setting the run loop to delegate to set, which means that when an event is triggered, the delegation method will be called on self (our script).
Once that done, we are starting out run loop.</p>

<p>Once the application is loaded the applicationDidFinishLaunching delegate is being triggered (line 24). At this point, we are looking for all the sound files in the sound system folder and storing them in an instance variable (line 25). Finally, we are calling the play_sound method (line 26).</p>

<p>The play_sound method checks that we have some audio files left to play (line 7), otherwise it quits the app. (line 8 ) If we still have some files in the queue, we get the first one (line 10) and use it to create an instance of NSSound (line 11).</p>

<p>Before playing the NSSound instance, we are setting its delegate to our script (self) (line 13). If you read <a href="http://developer.apple.com/mac/library/documentation/Cocoa/Reference/ApplicationKit/Classes/NSSound_Class/Reference/Reference.html">NSSound Cocoa documentation</a> for #play, you will notice that #play "initiates playback asynchronously and returns control to your application. Therefore, your application can continue doing work while the audio is playing." In our case, we don't want to do that, otherwise all the sounds will play at the same time.</p>

<p>The documentation also mentions a delegation you can use to avoid that. This is exactly what we did when we implemented:Â  def sound(sound, didFinishPlaying: state) (line 19)</p>

<p>Rubyists might be surprised by the method signature. MacRuby extended Ruby to support Objective-C selectors.</p>

<p>When the sound is playing, this delegate gets called, we check on the state of the sound, if it finished playing then we call play_sound again.</p>

<p>That's it!Â  It's a very elegant implementation giving us the benefits of both Ruby and Cocoa.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacRuby tips: embed a custom font]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2009/10/06/macruby-tips-embed-a-custom-font/"/>
    <updated>2009-10-06T09:23:44+02:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2009/10/06/macruby-tips-embed-a-custom-font</id>
    <content type="html"><![CDATA[<p>Let say you want to release your MacRuby app and use a custom embedded font?
You probably don't want to force your users to install the font.
Well, don't worry, just put the font file in your resources folder and use the following code:</p>

<pre><code>font_location = NSBundle.mainBundle.pathForResource('MyCustomFont', ofType: 'ttf')
font_url = NSURL.fileURLWithPath(font_location)
# in MacRuby, always make sure that cocoa constants start by an uppercase
CTFontManagerRegisterFontsForURL(font_url, KCTFontManagerScopeProcess, nil)
</code></pre>

<p>That's it, now your custom font is available and you can change your textfield instance's font like that:</p>

<pre><code>text_field.font = NSFont.fontWithName('MyCustomFont', size:24)
</code></pre>

<p>The only tricky things here were to know the Cocoa API call and to know that even if the Cocoa API references the constant to use as kCTFontManagerScopeProcess, because in Ruby, constants start by an uppercase, you need to convert it to: KCTFontManagerScopeProcess.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacRuby soon to reach a new milestone]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2009/10/05/macruby-soon-to-reach-a-new-milestone/"/>
    <updated>2009-10-05T23:58:53+02:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2009/10/05/macruby-soon-to-reach-a-new-milestone</id>
    <content type="html"><![CDATA[<p>Laurent just posted a <a href="http://bit.ly/2YPwRT">MacRuby status update</a> on the mailing list and the first official beta of MacRuby 0.5 should be released pretty soon.</p>

<p>Let's quickly look at Laurent's report:</p>

<ul>
<li><p>Early backtracing support.</p></li>
<li><p>Much better AOT compilation. Parts of the standard library are now pre-compiled for testing.</p></li>
<li><p>Migrated to LLVM top of tree.</p></li>
<li><p>Dispatcher performance is now back to normal (we lost about 30% due to gcc not inlining code).</p></li>
<li><p>Many bug fixes.</p></li>
</ul>


<p>In lay terms, backtracing is what you see when your app crashes or has a problem, it's the list of methods called before the exception was raised and the line where the error happened. Currently the backtrace is similar to what you would have with Ruby 1.9, however objective-c exceptions are not supported and there is still some work to do.</p>

<p>AOT compilation or Ahead Of Time compilation is the process of compiling a script into machine code. I already covered that <a href="http://merbist.com/2009/07/12/compiled-hello-world-with-macruby/">feature earlier</a>. Progress has been made and now some Ruby standard libraries are now pre-compiled in MacRuby. The two main advantages of doing AOT compilation are startup speed and obfuscation. Two important features for desktop applications or for when you want to license your server app.</p>

<p>Updating LLVM doesn't mean much for end users. With the support of the MacRuby team, <a href="http://www.icoretech.org/">Claudio</a> setup a nightly build bot <a href="http://macruby.icoretech.org/">http://macruby.icoretech.org/</a> allowing you to download nightly builds for SnowLeopard. The app is a <a href="http://sinatrarb.com">Sinatra app</a> that could can checkout on github:Â  <a href="http://github.com/masterkain/macruby-nightlies-web">http://github.com/masterkain/macruby-nightlies-web</a> What's interesting is that Apple is sponsoring both LLVM and MacRuby which will hopefully bring some synergy and help both projects.</p>

<p>Fixed dispatcher, this is a just a perf bug fix only affecting people on trunk.</p>

<p>I personally used MacRuby quite a lot recently. I have been writing a 2D video game for my <a href="http://rubyconf.org/talks/153-writing-2-d-games-for-the-osx-platform-in-ruby">RubyConf talk</a>.</p>

<p><img src="http://img.skitch.com/20091006-kj64ix4up5q8dh4yin38hjrjcp.jpg" alt="" />It's a simple game only using Ruby and Cocoa. It's not a fancy game and, no, it doesn't run on the iPhone yet ;)</p>

<p>I never wrote a game in Cocoa and I decided not to use an existing framework like Gosu or cocos2d, instead I decided to write everything from scratch. Using CoreAnimation instead of OpenGL, the task wasn't that hard at all. in less than 1,000 LOC (before refactoring), I have a fully working game.</p>

<p>I will be previewing the game at <a href="http://www.railssummit.com.br/">RailsSummit</a> and will show the code and explain how to get there at <a href="http://rubyconf.org/talks/153-writing-2-d-games-for-the-osx-platform-in-ruby">RubyConf</a>.</p>

<p>When I started getting involved with MacRuby, I really did not think I would write a video game in Ruby and actually enjoy it. At the end of the day, I will more than likely use MacRuby for desktop/mobile/server apps more than games, but it's awesome to be able to use your favorite language to do other things than what you are usually paid to do.</p>

<p>MacRuby is coming along very nicely, and I'm really excited about the multitude of new options offered to Ruby developers on OSX and can't wait for 0.5 final and see what people will do with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiled hello world with MacRuby]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2009/07/12/compiled-hello-world-with-macruby/"/>
    <updated>2009-07-12T11:53:53+02:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2009/07/12/compiled-hello-world-with-macruby</id>
    <content type="html"><![CDATA[<p>To celebrate the amazing <a href="http://lists.macosforge.org/pipermail/macruby-devel/2009-July/002062.html">work being done by Laurent Sansonetti on MacRuby</a> here is a hello world using the newÂ <a href="http://en.wikipedia.org/wiki/LLVM">LLVM</a> based compiler.
<code>
$ echo "p ARGV.join(' ').upcase" &gt; hello_world.rb
$ macrubyc hello_world.rb -o macruby_says
$ ./macruby_says hello world
"HELLO WORLD"
</code></p>

<p>Note that to achieve this result, you need to be using the experimental branch of MacRuby and have LLVM installed. (check theÂ <a href="http://svn.macosforge.org/repository/ruby/MacRuby/branches/experimental/README.rdoc">readme</a> available in MacRuby's repo).</p>

<p>Let's quickly look at what we just did.
We created a single line ruby script that takes the passed arguments, joins them and print them uppercase.
Then, we compiled our script into aÂ <a href="http://en.wikipedia.org/wiki/Mach-O">Mach-O</a> object file and produce an executable.</p>

<p>Here is an extract from Laurent's latest status report:</p>

<blockquote><p>Produced executables embed all the compiled Ruby code as well as MacRuby, statically.
It can be distributed as is and does not depend on anything MacRuby or LLVM at runtime.
The Ruby source code is compiled into native machine code (same process as we do at runtime with the JIT compiler), so it's also a good way to obfuscate the source code.
The final binary looks like an Objective-C binary (except that it's larger)</p></blockquote>

<p>Don't expect to compile Rails just yet, it's still in a preliminary stage.</p>

<p>The final release you should let you pick one of the 2 compilation modes:</p>

<ul>
<li><strong>normal mode</strong>: full ruby specs, compile down to machine code and use LLVM at runtime. (recommended for desktop/server apps)</li>
<li><strong>full mode</strong>: no full ruby spec support, no runtime code generation, no LLVM. ("very light application and/or if the environment does not support runtime code generation" (<em>hint-hint)</em>)</li>
</ul>


<p>As you can see,Â <a href="http://macruby.org">MacRuby</a> is moving forward and the experimental branch should soon move to trunk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacRuby, changing the Ruby ecosystem]]></title>
    <link href="http://mattetti.github.com/Matt-Aimonetti/posts/2009/05/27/macruby-changing-the-ruby-ecosystem/"/>
    <updated>2009-05-27T12:32:05+02:00</updated>
    <id>http://mattetti.github.com/Matt-Aimonetti/posts/2009/05/27/macruby-changing-the-ruby-ecosystem</id>
    <content type="html"><![CDATA[<h3>What's MacRuby?</h3>

<p><a href="http://www.macruby.org/">MacRuby</a> is an Apple-sponsored, open source, full Ruby implementation on top ofÂ <a href="http://en.wikipedia.org/wiki/Objective-C">Objective-C</a> runtime. In other words, whatever code runs on Ruby 1.9, should/will run on MacRuby. Yes, you read correctly, MacRuby can/will be able to run all your Ruby code. That means that eventually you will even be able to run yourÂ <a href="http://en.wikipedia.org/wiki/Ruby%20on%20Rails">Rails</a>/<a href="http://en.wikipedia.org/wiki/Sinatra%20%28software%29">Sinatra</a>/new-sexy-ruby-framework app on MacRuby.</p>

<p>UnlikeÂ <a href="http://en.wikipedia.org/wiki/RubyCocoa">RubyCocoa</a>, MacRuby is not a bridge, it is a full implementation of the Ruby language on top of Apple's Objective-C runtime. Taking a huge shortcut, MacRuby implements the Ruby syntax by aliasing it to the Obj-C language counterpart. A Ruby string instance is really in fact, an instance ofÂ <a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableString_Class/Reference/Reference.html">NSMutableString</a>. This is obviously transparent for you as a developer since you have the same Ruby API, but it also means that MacRuby can make use of the various Objective-C's goodies such as native threads,Â <a href="http://en.wikipedia.org/wiki/Objective-c#Garbage_collection"> garbage collector</a> in the background as well as the runtime performance.</p>

<p>On top of that, you have full access to the Obj-C API from your Ruby code. (tip: in macirb, try "my string".methods(true, true).sort to see the available Ruby + Objective-C methods on your String instance)Â  The reason why having access to Objective-C is important is because it gives you the possibility to write nativeÂ <a href="http://en.wikipedia.org/wiki/Cocoa%20%28API%29">Cocoa</a>apps using Ruby. For those who don't know Cocoa, is a set of APIs for MacOSX development.</p>

<p>However, note that even though, the Cocoa support is almost complete and stable, MacRuby is still in development, especially on the Ruby side of things.</p>

<h3>What is it not?</h3>

<ul>
<li><p><a href="http://www.macruby.org/">MacRuby</a> is not a fork of Ruby. Full <a href="http://rubyspec.org/">rubyspec</a> compliance is expected! It's true that MacRuby supports smalltalk/Obj-C method selectors so it might be considered a language superset.</p></li>
<li><p>MacRuby is not limited to the OSX platform. All its dependencies are open source and could possibly be compiled for other POSIX-based systems such as Linux.. (not done yet)</p></li>
<li><p>Even if MacRuby's primary goal is to allow you to write efficient Cocoa apps, it does not mean that MacRuby is limited to that.</p></li>
<li><p>MacRuby doesn't require you to learn Objective-C in order to develop Cocoa apps. (you just need to understand Obj-C selectors)</p></li>
</ul>


<h3>What's coming up?</h3>

<p>The current version of MacRuby (today being the 27th of May 2009) is version 0.4. You might have heard of things about MacRuby crazy performance,Â <a href="http://en.wikipedia.org/wiki/Low%20Level%20Virtual%20Machine">LLVM</a>,Â <a href="http://en.wikipedia.org/wiki/AOT%20compiler">AOT compilation</a><a href="http://en.wikipedia.org/wiki/AOT%20compiler">AOT compilation</a> etc... This is all happening in the 'experimental' branch.</p>

<p>What's going on is that up to MacRuby 0.5, MR wasÂ  using YARV (Ruby 1.9 interpreter) on top of Obj-C and which obviously limited MacRuby'sÂ  to YARV's performance. After RubyConf 2008, Laurent Sansonetti, MacRuby's lead developer, decided to try removing YARV to only keep its <a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a> and experiment with using <a href="http://en.wikipedia.org/wiki/Llvm">LLVM</a> instead of the 1.9 interpreter.</p>

<p>This switch turned out to be very promising and was noticed right away by influential people such as <a href="http://antoniocangiano.com/2009/03/29/why-macruby-matters/">IBM's Antonio Cangiano</a>. Since then, performance and compatibility have increased. Laurent even started working on an Ahead Of Time (AOT) compiler: <a href="http://pastie.org/485095">http://pastie.org/485095</a> What's really impressive is that in this specific example (Fibonacci sequence), <strong>MacRuby's compiled code is faster than Objective-C!</strong> But let's not jump the gun. First this is a very very early prototype and most of your apps won't be using Fib. sequences ;) In this case, MacRuby's recursive method dispatch is faster but again, this is just a proof of concept and even though MacRuby is getting close to Obj-C speed, it's still far from matching Obj-C's impressive performance.</p>

<p>What this basically means is that you will be able to compile your Ruby code down to binary code. Imagine, taking your Rails app and compiling it down to a binary file that you can just push to your server :) But really, what's almost more important is that Ruby will get closer to Objective-C's speed.</p>

<h3>Why will MacRuby change the Ruby ecosystem?</h3>

<p>As a web developer, getting better performance is great. But Ruby is already fast enough. Rails is faster than any PHP framework out there and when doing Merb's benchmarks we proved that Ruby for the web can definitely be fast.</p>

<p>Now if MacRuby ends up running 3-7X faster than Ruby 1.9 (no one can tell for sure), existing Ruby developers will certainly be really pleased but it will probably affect more people outside of our community than within. Let's face it, our community isn't that big but it's growing fast and people are mainly coming to Ruby for its web frameworks. But Ruby has much more than that to offer. Desktop applications, <a href="http://www.railsenvy.com/2009/5/11/rubystein-ruby-meets-wolfenstein">video games</a>, scientific computation and even embedded apps. Apple is betting on Ruby probably because of the fact that they see the potential in the language itself.</p>

<p>Would people still use Java if Ruby is as fast/faster than Java? Probably! Would they think about using Ruby for their next project? I would certainly hope so!</p>

<p>Ruby is viral, it's such a great language, people who have started using it are having a hard time going back to what they used before. But to spread the 'love', we need to give people the opportunity to discover why Ruby is so great and to do that, we need to make sure Ruby is relevant to them. By making Ruby a realistic option to write desktop/mobile applications, we are targeting a new audience. An experienced audience which will be able to bring a new perspective to our ecosystem and help it grow.</p>

<p>Of course, MacRuby isn't the only implementation out there trying to do that. JRuby and IronRuby are also very interesting projects. My take on it, is that MacRuby will be able to change things because of its new approach and potential community. It will more than likely be the first Ruby implementation compiling down to binary code, it will more than likely be the fastest implementation and it will more than likely draw a different type of developer.</p>

<p>Does it mean thatÂ <a href="http://jruby.codehaus.org/">JRuby</a>,Â <a href="http://www.ironruby.net/">IronRuby</a>,Â <a href="http://www.infoq.com/news/2009/04/ruby-on-sap">BlueRuby</a> will be useless? Absolutely not! Matz is the first one to encourage diversity and I agree that this is a great way to move forward. These projects solve different problems and all have pros and cons, but they also all share a similar goal: making Ruby a better and more popular language outside of its original community. JRuby, IronRuby and MacRuby bring Ruby to the respective Java, .net and Cocoa communities, and indirectly bring fresh developers to Ruby. These implementations are critical in the way they actually bridge existing communities and in the end, all Rubyists will benefit from it. Also, even though MacRuby and IronRuby are in active development, JRuby is the only mature alternative to MRI/YARV at this point and it proved that Ruby can coexist in a different community as well as contribute a lot of interesting things back to the Ruby community.</p>

<p>To summarize, I see tremendous potential in MacRuby. There is the obvious technical aspect of the implementation, but also the indirect affect MacRuby could have on our community. I believe that MacRuby is an agent of change and will help bringing more diversity to our community. It will change mentalities and push Ruby to places where it's being struggling to make a mark. I can see the so-called "Enterprise" people looking at Ruby differently. I also think that MacRuby has the potential to be at the origin of a new type of hybrid application, mixing desktop/mobile/distributed applications with centralized web applications. Why not dream of p2p applications/games using a subset of Rails to communicate between each other and with a central server?</p>

<p><a href="http://macruby.org"><img src="http://merbist.com/wp-content/uploads/2009/05/macruby-site.jpg" alt="macruby-site" /></a></p>

<p>If you are interested in learning more about MacRuby, check the list of <a href="http://www.macruby.org/documentation.html">resources available on the MacRuby site</a>.</p>

<p>Rich Kilmer and I are also working on a documentation application for Cocoa andÂ <a href="http://www.macruby.org/hotcocoa.html">HotCocoa</a> as well as a MVC framework for writing Cocoa apps using HotCocoa (HotCocoa isÂ a thin, idiomatic Ruby layer that sits above Cocoa and other frameworks).</p>

<p>Make sure to keep an eye on <a href="http://twitter.com/macruby">@macruby</a> and the <a href="http://macruby.org">MacRuby website</a> if you want to keep track of the latest news.</p>
]]></content>
  </entry>
  
</feed>
